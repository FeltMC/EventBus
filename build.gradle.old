plugins {
    id 'net.minecraftforge.gradleutils' version '2.+'
    id 'com.github.ben-manes.versions' version '0.42.0'
    id 'de.jjohannes.extra-java-module-info' version '0.11'
}
apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'

group 'net.minecraftforge'

java.toolchain.languageVersion = JavaLanguageVersion.of(16)

changelog {
    fromTag "1.0.0"
}

version = gradleutils.getTagOffsetVersion()
logger.lifecycle('Version: ' + version)

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

dependencyUpdates {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}

test {
    useJUnitPlatform()
    forkEvery 1
}

sourceSets {
    testJars
    jmh
}

ext.sharedManifest = manifest {
    attributes(['Specification-Title': 'eventbus',
                'Specification-Vendor': 'Forge',
                'Specification-Version': '1', // Currently version 1 of the eventbus specification
                'Implementation-Title': project.name,
                'Implementation-Version': "${project.version}+${System.getenv("BUILD_NUMBER")?:0}+${gradleutils.gitInfo.branch}.${gradleutils.gitInfo.abbreviatedId}",
                'Implementation-Vendor' :'forge',
                'Implementation-Timestamp': java.time.Instant.now().toString(),
                'Git-Commit': gradleutils.gitInfo.abbreviatedId,
                'Git-Branch': gradleutils.gitInfo.branch,
                'Build-Number': "${System.getenv('BUILD_NUMBER')?:0}" ],
            'net/minecraftforge/eventbus/service/')
}

extraJavaModuleInfo {
    failOnMissingModuleInfo = false

    automaticModule('jmh-core-1.35.jar', 'jmh.core')
    automaticModule('jopt-simple-5.0.4.jar', 'jopt.simple')
    automaticModule('typetools-0.8.3.jar', 'typetools')
}

jar {
    manifest = project.manifest {
        from sharedManifest
    }
}

task testsJar(type: Jar) {
    archiveClassifier = 'testsjar'
    from sourceSets.testJars.output
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

configurations {
    jmhOnly
}

repositories {
    mavenLocal()
    maven {
        name = 'forge'
        url = 'https://maven.minecraftforge.net/'
    }
}

dependencies {
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.8.+')
    testImplementation('cpw.mods:modlauncher:10.0.+')
    testImplementation('cpw.mods:securejarhandler:1.0.+')
    testImplementation('org.junit.jupiter:junit-jupiter-engine:5.8.+')
    testImplementation('org.apache.logging.log4j:log4j-core:2.17.1')
    testImplementation('com.lmax:disruptor:3.4.2')
    testImplementation('net.sf.jopt-simple:jopt-simple:5.0.4')
    testImplementation('cpw.mods:bootstraplauncher:1.1.0')
    testCompileOnly('org.jetbrains:annotations:23.0.0')
    testImplementation(sourceSets.testJars.runtimeClasspath)
    testJarsImplementation(sourceSets.main.output)
    implementation('org.ow2.asm:asm:9.2')
    implementation('org.ow2.asm:asm-commons:9.2')
    implementation('org.ow2.asm:asm-tree:9.2')
    implementation('org.apache.logging.log4j:log4j-api:2.17.1')
    implementation('cpw.mods:modlauncher:10.0.+')
    compileOnly('org.jetbrains:annotations:23.0.0')
    api('net.jodah:typetools:0.8.+')
    jmhImplementation(sourceSets.main.output)
    jmhImplementation(sourceSets.testJars.output)
    jmhImplementation('cpw.mods:modlauncher:10.0.+')
    jmhImplementation('cpw.mods:securejarhandler:1.0.+')
    jmhImplementation('org.junit.jupiter:junit-jupiter-engine:5.8.+')
    jmhImplementation('org.apache.logging.log4j:log4j-core:2.17.1')
    jmhImplementation('org.apache.logging.log4j:log4j-api:2.17.1')
    jmhImplementation('org.ow2.asm:asm:9.2')
    jmhImplementation('org.ow2.asm:asm-tree:9.2')
    jmhImplementation('org.ow2.asm:asm-commons:9.2')
    jmhImplementation('org.openjdk.jmh:jmh-core:1.35')
    jmhImplementation('cpw.mods:bootstraplauncher:1.1.0')
    jmhOnly('org.openjdk.jmh:jmh-core:1.35')
    jmhOnly('org.openjdk.jmh:jmh-generator-annprocess:1.35')
    jmhOnly('cpw.mods:bootstraplauncher:1.1.0')
    jmhOnly('cpw.mods:securejarhandler:1.0.+')
    jmhOnly(sourceSets.jmh.output)
    jmhCompileOnly('org.jetbrains:annotations:23.0.0')
    jmhAnnotationProcessor('org.openjdk.jmh:jmh-generator-annprocess:1.35')
}
configurations.jmhImplementation.extendsFrom(configurations.implementation)

task jmh(type: JavaExec, dependsOn: sourceSets.jmh.output) {
    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(17)
    }
    jvmArgs= [
            '-p', sourceSets.jmh.runtimeClasspath.asPath,
            '--add-modules', 'ALL-MODULE-PATH',
            '--add-exports', 'net.minecraftforge.eventbus.jmh/net.minecraftforge.eventbus.benchmarks.jmh_generated=jmh.core'
    ]
    classpath = files(configurations.jmhOnly.asPath)
    mainClass = 'org.openjdk.jmh.Main'
    args    '-bm', 'avgt'  // benchmark mode
    args    '-r', '5s' // iteration time
    args    '-w', '5s' // warmup time
    args    '-wi', '3' // warmup iterations
    args    '-prof', 'stack' // profilers
    args    '-tu', 'ns' // time unit
    args    '-f', '3' // forks
    args    '-rff', project.file("${project.buildDir}/results/jmh/results.txt")  // results file
    args    'net.minecraftforge.eventbus.benchmarks.EventBusBenchmark'
}

artifacts {
    archives jar
    archives sourcesJar
    archives testsJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            pom {
                name = 'Event Bus'
                description = 'High performance Event Bus library'
                url = 'https://github.com/MinecraftForge/eventbus'
                scm {
                    url = 'https://github.com/MinecraftForge/eventbus'
                    connection = 'scm:git:git://github.com/MinecraftForge/eventbus.git'
                    developerConnection = 'scm:git:git@github.com:MinecraftForge/eventbus.git'
                }
                issueManagement {
                    system = 'github'
                    url = 'https://github.com/MinecraftForge/eventbus/issues'
                }

                licenses {
                    license {
                        name = 'LGPLv2.1'
                        url = 'https://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt'
                    }
                }

                developers {
                    developer {
                        id = 'cpw'
                        name = 'cpw'
                    }
                    developer {
                        id = 'LexManos'
                        name = 'LexManos'
                    }
                }
            }
        }
    }
    repositories {
        maven gradleutils.getPublishingForgeMaven()
    }
}